{"version":3,"sources":["shared/components/ColoredButton.js","shared/components/DialogTitleWithCloseIcon.js","shared/components/FormDialog.js","logged_in/components/subscription/stripe/StripeTextField.js","logged_in/components/subscription/stripe/StripeCardForm.js","logged_in/components/subscription/stripe/StripeIBANForm.js","logged_in/components/subscription/AddBalanceDialog.js"],"names":["memo","props","color","children","theme","buttonTheme","createTheme","adaptV4Theme","Object","C_work_Gajago_src_Front_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","palette","primary","main","buttonProps","_ref","C_work_Gajago_src_Front_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_mui_material__WEBPACK_IMPORTED_MODULE_5__","injectFirst","_mui_material__WEBPACK_IMPORTED_MODULE_6__","_mui_material__WEBPACK_IMPORTED_MODULE_7__","assign","withTheme","paddingBottom","onClose","disabled","title","disablePadding","react_default","DialogTitle","style","spacing","paddingLeft","paddingRight","paddingTop","width","Box","display","justifyContent","Typography","variant","IconButton","onClick","marginRight","marginTop","aria-label","size","Close_default","withStyles","dialogPaper","flexDirection","alignItems","maxWidth","actions","dialogPaperScrollPaper","maxHeight","dialogContent","classes","open","loading","headline","onFormSubmit","content","hideBackdrop","Dialog","disableEscapeKeyDown","paper","paperScrollPaper","components_DialogTitleWithCloseIcon","DialogContent","className","onSubmit","stripeOptions","StripeElement","select","rest","objectWithoutProperties","options","objectSpread","base","typography","body1","text","fontSize","fontSmoothing","::placeholder","secondary","invalid","iconColor","error","TextField","InputLabelProps","shrink","inputProps","component","StripeCardForm","stripeError","setStripeError","amount","amountError","onAmountChange","name","setName","Grid","container","item","xs","margin","required","label","value","onChange","event","target","fullWidth","autoFocus","autoComplete","type","parseInt","helperText","InputProps","startAdornment","InputAdornment","position","stripe_StripeTextField","CardElement","StripeIBANForm","email","setEmail","IbanElement","supportedCountries","stripePromise","loadStripe","paymentOptions","AddBalanceDialog","onSuccess","_useState","useState","_useState2","slicedToArray","setLoading","_useState3","_useState4","paymentOption","setPaymentOption","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","setAmount","_useState13","_useState14","setAmountError","elements","useElements","stripe","useStripe","getStripePaymentInfo","card","getElement","billing_details","sepa_debit","Error","FormDialog","asyncToGenerator","regenerator_default","mark","_callee","_yield$stripe$createP","wrap","_context","prev","next","preventDefault","abrupt","createPaymentMethod","sent","message","stop","_x","apply","this","arguments","pb","mb","map","option","key","ColoredButton","disableElevation","common","black","react","stripe_StripeCardForm","HighlightedInformation","stripe_StripeIBANForm","renderPaymentComponent","Button","ButtonCircularProgress","Wrapper","react_stripe_umd"],"mappings":"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","file":"static/js/13.67f3eba0.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, createTheme, ThemeProvider, StyledEngineProvider, adaptV4Theme } from \"@mui/material\";\r\n\r\nfunction ColoredButton(props) {\r\n  const { color, children, theme } = props;\r\n  const buttonTheme = createTheme(adaptV4Theme({\r\n    ...theme,\r\n    palette: {\r\n      primary: {\r\n        main: color\r\n      }\r\n    }\r\n  }));\r\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\r\n  return (\r\n    <StyledEngineProvider injectFirst>\r\n      <ThemeProvider theme={buttonTheme}>\r\n        <Button {...buttonProps} color=\"primary\">\r\n          {children}\r\n        </Button>\r\n      </ThemeProvider>\r\n    </StyledEngineProvider>\r\n  );\r\n}\r\n\r\nColoredButton.propTypes = {\r\n  color: PropTypes.string.isRequired\r\n};\r\n\r\nexport default memo(ColoredButton);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { IconButton, DialogTitle, Typography, Box } from \"@mui/material\";\r\nimport withTheme from '@mui/styles/withTheme';\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nfunction DialogTitleWithCloseIcon(props) {\r\n  const {\r\n    theme,\r\n    paddingBottom,\r\n    onClose,\r\n    disabled,\r\n    title,\r\n    disablePadding\r\n  } = props;\r\n  return (\r\n    <DialogTitle\r\n      style={{\r\n        paddingBottom: paddingBottom\r\n          ? paddingBottom && disablePadding\r\n            ? 0\r\n            : paddingBottom\r\n          : theme.spacing(3),\r\n        paddingLeft: disablePadding ? 0 : null,\r\n        paddingRight: disablePadding ? 0 : null,\r\n        paddingTop: disablePadding ? 0 : theme.spacing(2),\r\n        width: \"100%\"\r\n      }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"h5\">{title}</Typography>\r\n        <IconButton\r\n          onClick={onClose}\r\n          style={{ marginRight: -12, marginTop: -10 }}\r\n          disabled={disabled}\r\n          aria-label=\"Close\"\r\n          size=\"large\">\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </Box>\r\n    </DialogTitle>\r\n  );\r\n}\r\n\r\nDialogTitleWithCloseIcon.propTypes = {\r\n  theme: PropTypes.object,\r\n  paddingBottom: PropTypes.number,\r\n  onClose: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  disablePadding: PropTypes.bool\r\n};\r\n\r\nexport default withTheme(DialogTitleWithCloseIcon);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Dialog, DialogContent, Box } from \"@mui/material\";\r\nimport withStyles from '@mui/styles/withStyles';\r\nimport DialogTitleWithCloseIcon from \"./DialogTitleWithCloseIcon\";\r\n\r\nconst styles = theme => ({\r\n  dialogPaper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 420\r\n  },\r\n  actions: {\r\n    marginTop: theme.spacing(2)\r\n  },\r\n  dialogPaperScrollPaper: {\r\n    maxHeight: \"none\"\r\n  },\r\n  dialogContent: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0\r\n  }\r\n});\r\n\r\n/**\r\n * A Wrapper around the Dialog component to create centered\r\n * Login, Register or other Dialogs.\r\n */\r\nfunction FormDialog(props) {\r\n  const {\r\n    classes,\r\n    open,\r\n    onClose,\r\n    loading,\r\n    headline,\r\n    onFormSubmit,\r\n    content,\r\n    actions,\r\n    hideBackdrop\r\n  } = props;\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      disableEscapeKeyDown={loading}\r\n      classes={{\r\n        paper: classes.dialogPaper,\r\n        paperScrollPaper: classes.dialogPaperScrollPaper\r\n      }}\r\n      hideBackdrop={hideBackdrop ? hideBackdrop : false}>\r\n      <DialogTitleWithCloseIcon\r\n        title={headline}\r\n        onClose={onClose}\r\n        disabled={loading}\r\n      />\r\n      <DialogContent className={classes.dialogContent}>\r\n        <form onSubmit={onFormSubmit}>\r\n          <div>{content}</div>\r\n          <Box width=\"100%\" className={classes.actions}>\r\n            {actions}\r\n          </Box>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nFormDialog.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  headline: PropTypes.string.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  onFormSubmit: PropTypes.func.isRequired,\r\n  content: PropTypes.element.isRequired,\r\n  actions: PropTypes.element.isRequired,\r\n  hideBackdrop: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(FormDialog);\r\n","import React from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\nimport withTheme from \"@mui/styles/withTheme\";\r\n\r\nfunction StripeTextField(props) {\r\n  const { stripeOptions, StripeElement, select, theme, ...rest } = props;\r\n  const options = {\r\n    style: {\r\n      base: {\r\n        ...theme.typography.body1,\r\n        color: theme.palette.text.primary,\r\n        fontSize: \"16px\",\r\n        fontSmoothing: \"antialiased\",\r\n        \"::placeholder\": {\r\n          color: theme.palette.text.secondary,\r\n        },\r\n      },\r\n      invalid: {\r\n        iconColor: theme.palette.error.main,\r\n        color: theme.palette.error.main,\r\n      },\r\n    },\r\n    ...stripeOptions,\r\n  };\r\n  return (\r\n    <TextField\r\n      InputLabelProps={{\r\n        shrink: true,\r\n      }}\r\n      inputProps={{ component: StripeElement, options: options }}\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n\r\nexport default withTheme(StripeTextField);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TextField, Grid, InputAdornment } from \"@mui/material\";\r\nimport { CardElement } from \"@stripe/react-stripe-js\";\r\nimport StripeTextField from \"./StripeTextField\";\r\n\r\nfunction StripeCardForm(props) {\r\n  const {\r\n    stripeError,\r\n    setStripeError,\r\n    amount,\r\n    amountError,\r\n    onAmountChange,\r\n    name,\r\n    setName\r\n  } = props;\r\n  return (\r\n    <Grid container spacing={2} justifyContent=\"space-between\">\r\n      <Grid item xs={8}>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"none\"\r\n          required\r\n          label=\"Your Name\"\r\n          value={name}\r\n          onChange={event => {\r\n            setName(event.target.value);\r\n          }}\r\n          fullWidth\r\n          autoFocus\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <TextField\r\n          required\r\n          value={amount}\r\n          onChange={event => {\r\n            onAmountChange(parseInt(event.target.value));\r\n          }}\r\n          error={amountError ? true : false}\r\n          helperText={amountError}\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          type=\"number\"\r\n          margin=\"none\"\r\n          label=\"Amount\"\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <StripeTextField\r\n          margin=\"none\"\r\n          fullWidth\r\n          label=\"Credit Card\"\r\n          error={stripeError ? true : false}\r\n          helperText={stripeError}\r\n          variant=\"outlined\"\r\n          required\r\n          StripeElement={CardElement}\r\n          onChange={() => {\r\n            if (stripeError) {\r\n              setStripeError(\"\");\r\n            }\r\n          }}\r\n        ></StripeTextField>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nStripeCardForm.propTypes = {\r\n  stripeError: PropTypes.string.isRequired,\r\n  setStripeError: PropTypes.func.isRequired,\r\n  amount: PropTypes.number.isRequired,\r\n  onAmountChange: PropTypes.func.isRequired,\r\n  amountError: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  setName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default StripeCardForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TextField, Grid, InputAdornment } from \"@mui/material\";\r\nimport StripeTextField from \"./StripeTextField\";\r\nimport { IbanElement } from \"@stripe/react-stripe-js\";\r\n\r\nfunction StripeIBANForm(props) {\r\n  const {\r\n    stripeError,\r\n    setStripeError,\r\n    amount,\r\n    amountError,\r\n    onAmountChange,\r\n    name,\r\n    setName,\r\n    email,\r\n    setEmail\r\n  } = props;\r\n  return (\r\n    <Grid container spacing={2} justifyContent=\"space-between\">\r\n      <Grid item xs={8}>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"none\"\r\n          required\r\n          label=\"Your Name\"\r\n          value={name}\r\n          onChange={event => {\r\n            setName(event.target.value);\r\n          }}\r\n          fullWidth\r\n          autoFocus\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <TextField\r\n          required\r\n          value={amount}\r\n          onChange={event => {\r\n            onAmountChange(parseInt(event.target.value));\r\n          }}\r\n          error={amountError ? true : false}\r\n          helperText={amountError}\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          type=\"number\"\r\n          margin=\"none\"\r\n          label=\"Amount\"\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          required\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          value={email}\r\n          onChange={event => {\r\n            setEmail(event.target.value);\r\n          }}\r\n          type=\"email\"\r\n          margin=\"none\"\r\n          label=\"Email\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <StripeTextField\r\n          margin=\"none\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          label=\"IBAN\"\r\n          error={stripeError ? true : false}\r\n          helperText={stripeError}\r\n          required\r\n          StripeElement={IbanElement}\r\n          stripeOptions={{ supportedCountries: [\"SEPA\"] }}\r\n          onChange={() => {\r\n            if (stripeError) {\r\n              setStripeError(\"\");\r\n            }\r\n          }}\r\n        ></StripeTextField>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nStripeIBANForm.propTypes = {\r\n  stripeError: PropTypes.string.isRequired,\r\n  setStripeError: PropTypes.func.isRequired,\r\n  amount: PropTypes.number.isRequired,\r\n  onAmountChange: PropTypes.func.isRequired,\r\n  amountError: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  setName: PropTypes.func.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  setEmail: PropTypes.func.isRequired\r\n};\r\n\r\nexport default StripeIBANForm;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport {\r\n  Elements,\r\n  CardElement,\r\n  IbanElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Grid, Button, Box } from \"@mui/material\";\r\nimport withTheme from '@mui/styles/withTheme';\r\nimport StripeCardForm from \"./stripe/StripeCardForm\";\r\nimport StripeIbanForm from \"./stripe/StripeIBANForm\";\r\nimport FormDialog from \"../../../shared/components/FormDialog\";\r\nimport ColoredButton from \"../../../shared/components/ColoredButton\";\r\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\r\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\r\n\r\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\r\n\r\nconst paymentOptions = [\"Credit Card\", \"SEPA Direct Debit\"];\r\n\r\nconst AddBalanceDialog = withTheme(function (props) {\r\n  const { open, theme, onClose, onSuccess } = props;\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [paymentOption, setPaymentOption] = useState(\"Credit Card\");\r\n  const [stripeError, setStripeError] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n  const [amountError, setAmountError] = useState(\"\");\r\n  const elements = useElements();\r\n  const stripe = useStripe();\r\n\r\n  const onAmountChange = amount => {\r\n    if (amount < 0) {\r\n      return;\r\n    }\r\n    if (amountError) {\r\n      setAmountError(\"\");\r\n    }\r\n    setAmount(amount);\r\n  };\r\n\r\n  const getStripePaymentInfo = () => {\r\n    switch (paymentOption) {\r\n      case \"Credit Card\": {\r\n        return {\r\n          type: \"card\",\r\n          card: elements.getElement(CardElement),\r\n          billing_details: { name: name }\r\n        };\r\n      }\r\n      case \"SEPA Direct Debit\": {\r\n        return {\r\n          type: \"sepa_debit\",\r\n          sepa_debit: elements.getElement(IbanElement),\r\n          billing_details: { email: email, name: name }\r\n        };\r\n      }\r\n      default:\r\n        throw new Error(\"No case selected in switch statement\");\r\n    }\r\n  };\r\n\r\n  const renderPaymentComponent = () => {\r\n    switch (paymentOption) {\r\n      case \"Credit Card\":\r\n        return (\r\n          <Fragment>\r\n            <Box mb={2}>\r\n              <StripeCardForm\r\n                stripeError={stripeError}\r\n                setStripeError={setStripeError}\r\n                setName={setName}\r\n                name={name}\r\n                amount={amount}\r\n                amountError={amountError}\r\n                onAmountChange={onAmountChange}\r\n              />\r\n            </Box>\r\n            <HighlightedInformation>\r\n              You can check this integration using the credit card number{\" \"}\r\n              <b>4242 4242 4242 4242 04 / 24 24 242 42424</b>\r\n            </HighlightedInformation>\r\n          </Fragment>\r\n        );\r\n      case \"SEPA Direct Debit\":\r\n        return (\r\n          <Fragment>\r\n            <Box mb={2}>\r\n              <StripeIbanForm\r\n                stripeError={stripeError}\r\n                setStripeError={setStripeError}\r\n                setName={setName}\r\n                setEmail={setEmail}\r\n                name={name}\r\n                email={email}\r\n                amount={amount}\r\n                amountError={amountError}\r\n                onAmountChange={onAmountChange}\r\n              />\r\n            </Box>\r\n            <HighlightedInformation>\r\n              You can check this integration using the IBAN\r\n              <br />\r\n              <b>DE89370400440532013000</b>\r\n            </HighlightedInformation>\r\n          </Fragment>\r\n        );\r\n      default:\r\n        throw new Error(\"No case selected in switch statement\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormDialog\r\n      open={open}\r\n      onClose={onClose}\r\n      headline=\"Add Balance\"\r\n      hideBackdrop={false}\r\n      loading={loading}\r\n      onFormSubmit={async event => {\r\n        event.preventDefault();\r\n        if (amount <= 0) {\r\n          setAmountError(\"Can't be zero\");\r\n          return;\r\n        }\r\n        if (stripeError) {\r\n          setStripeError(\"\");\r\n        }\r\n        setLoading(true);\r\n        const { error } = await stripe.createPaymentMethod(\r\n          getStripePaymentInfo()\r\n        );\r\n        if (error) {\r\n          setStripeError(error.message);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        onSuccess();\r\n      }}\r\n      content={\r\n        <Box pb={2}>\r\n          <Box mb={2}>\r\n            <Grid container spacing={1}>\r\n              {paymentOptions.map(option => (\r\n                <Grid item key={option}>\r\n                  <ColoredButton\r\n                    variant={\r\n                      option === paymentOption ? \"contained\" : \"outlined\"\r\n                    }\r\n                    disableElevation\r\n                    onClick={() => {\r\n                      setStripeError(\"\");\r\n                      setPaymentOption(option);\r\n                    }}\r\n                    color={theme.palette.common.black}\r\n                  >\r\n                    {option}\r\n                  </ColoredButton>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Box>\r\n          {renderPaymentComponent()}\r\n        </Box>\r\n      }\r\n      actions={\r\n        <Fragment>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            size=\"large\"\r\n            disabled={loading}\r\n          >\r\n            Pay with Stripe {loading && <ButtonCircularProgress />}\r\n          </Button>\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n});\r\n\r\nAddBalanceDialog.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSuccess: PropTypes.func.isRequired\r\n};\r\n\r\nfunction Wrapper(props) {\r\n  const { open, onClose, onSuccess } = props;\r\n  return (\r\n    <Elements stripe={stripePromise}>\r\n      {open && (\r\n        <AddBalanceDialog open={open} onClose={onClose} onSuccess={onSuccess} />\r\n      )}\r\n    </Elements>\r\n  );\r\n}\r\n\r\n\r\nWrapper.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSuccess: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Wrapper;\r\n"],"sourceRoot":""}